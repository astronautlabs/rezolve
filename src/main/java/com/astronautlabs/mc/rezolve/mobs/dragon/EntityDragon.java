package com.astronautlabs.mc.rezolve.mobs.dragon;

import com.astronautlabs.mc.rezolve.RezolveMod;
import com.astronautlabs.mc.rezolve.RezolvePacketHandler;
import com.astronautlabs.mc.rezolve.inventory.DragonUpdateMessage;
import net.minecraft.entity.*;
import net.minecraft.entity.passive.EntityTameable;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.init.Blocks;
import net.minecraft.init.SoundEvents;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.network.datasync.DataParameter;
import net.minecraft.network.datasync.DataSerializers;
import net.minecraft.network.datasync.EntityDataManager;
import net.minecraft.pathfinding.Path;
import net.minecraft.pathfinding.PathHeap;
import net.minecraft.pathfinding.PathPoint;
import net.minecraft.util.*;
import net.minecraft.util.datafix.DataFixer;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.MathHelper;
import net.minecraft.util.math.Vec3d;
import net.minecraft.util.text.ITextComponent;
import net.minecraft.world.World;
import net.minecraft.world.WorldServer;
import net.minecraft.world.end.DragonFightManager;
import net.minecraft.world.gen.feature.WorldGenEndPodium;
import net.minecraftforge.fml.relauncher.Side;
import net.minecraftforge.fml.relauncher.SideOnly;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import javax.annotation.Nullable;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public class EntityDragon extends EntityTameable {

	private static final Logger LOGGER = LogManager.getLogger();
	public static final DataParameter<Integer> PHASE = EntityDataManager.<Integer>createKey(EntityDragon.class, DataSerializers.VARINT);

	/** Ring buffer array for the last 64 Y-positions and yaw rotations. Used to calculate offsets for the animations. */
	public double[][] ringBuffer = new double[64][3];

	/** Index into the ring buffer. Incremented once per tick and restarts at 0 once it reaches the end of the buffer. */
	public int ringBufferIndex = -1;

	/** An array containing all body parts of this dragon */
	public EntityDragonPart[] dragonPartArray;

	/** The head bounding box of a dragon */
	public EntityDragonPart dragonPartHead = new EntityDragonPart(this, "head", 6.0F, 6.0F);
	public EntityDragonPart dragonPartNeck = new EntityDragonPart(this, "neck", 6.0F, 6.0F);

	/** The body bounding box of a dragon */
	public EntityDragonPart dragonPartBody = new EntityDragonPart(this, "body", 8.0F, 8.0F);
	public EntityDragonPart dragonPartTail1 = new EntityDragonPart(this, "tail", 4.0F, 4.0F);
	public EntityDragonPart dragonPartTail2 = new EntityDragonPart(this, "tail", 4.0F, 4.0F);
	public EntityDragonPart dragonPartTail3 = new EntityDragonPart(this, "tail", 4.0F, 4.0F);
	public EntityDragonPart dragonPartWing1 = new EntityDragonPart(this, "wing", 4.0F, 4.0F);
	public EntityDragonPart dragonPartWing2 = new EntityDragonPart(this, "wing", 4.0F, 4.0F);

	/** Animation time at previous tick. */
	public float prevAnimTime;

	/** Animation time, used to control the speed of the animation cycles (wings flapping, jaw opening, etc.) */
	public float animTime;

	/** Activated if the dragon is flying though obsidian, white stone or bedrock. Slows movement and animation speed. */
	public boolean slowed;
	public int deathTicks;

	/** The dragon fight manager */
	private final DragonFightManager fightManager;

	/** The dragon phase manager */
	private final DragonPhaseManager phaseManager;
	private int growlTime = 200;
	private int sittingDamageReceived;

	/**
	 * A series of points describing three circles. The first is low to the ground and described by the first 12 points;
	 * the next 8 points describe a spiral upwards to the next, tighter circle of just 4 points. Generated by
	 * initPathPoints.
	 */
	private final PathPoint[] pathPoints = new PathPoint[24];
	/**
	 * An array of bitmaps indicating, for each member of pathPoints, which other members should be considered
	 * "neighboring" for the purpose of path-finding. The set bits indicate the indexes into pathPoints that should be
	 * considered to be candidates for the next step in a path through the circles. Generated by initPathPoints.
	 */
	private final int[] neighbors = new int[24];
	private final PathHeap pathFindQueue = new PathHeap();
	private boolean grounded = false;

	public EntityDragon(World worldIn) {
		super(worldIn);

		this.log("** Rezzer dragon constructed");

		this.dragonPartArray = new EntityDragonPart[] {
			this.dragonPartHead,
			this.dragonPartNeck,
			this.dragonPartBody,
			this.dragonPartTail1,
			this.dragonPartTail2,
			this.dragonPartTail3,
			this.dragonPartWing1,
			this.dragonPartWing2
		};

		this.setHealth(this.getMaxHealth());
		this.setSize(16.0F, 8.0F);
		this.setScale(0.75f);

		this.noClip = false;
		this.growlTime = 100;
		this.isImmuneToFire = true;
		this.ignoreFrustumCheck = true;
		this.fightManager = null;
		this.phaseManager = new DragonPhaseManager(this);

		this.dragonLookHelper = new DragonLookHelper(this);
	}

	DragonLookHelper dragonLookHelper;

	public void log(String message, Object ...a) {
		System.out.println(String.format("[Dragon %s]", this.getShortId())+String.format(message.replace("{}", "%s"), a));
	}

	@Override
	public EntityAgeable createChild(EntityAgeable ageable) {

		System.out.println("DRAGON HEZ BABEH?");
		return null;
	}

	protected void applyEntityAttributes()
	{
		super.applyEntityAttributes();
		this.getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(50D);
	}

	protected void entityInit()
	{
		super.entityInit();
		this.getDataManager().register(PHASE, Integer.valueOf(DragonPhaseList.HOLDING_PATTERN.getId()));
	}



	/**
	 * Returns a double[3] array with movement offsets, used to calculate trailing tail/neck positions. [0] = yaw
	 * offset, [1] = y offset, [2] = unused, always 0. Parameters: buffer index offset, partial ticks.
	 */
	public double[] getMovementOffsets(int tIndex, float tTime)
	{
		if (this.getHealth() <= 0.0F) {
			tTime = 0.0F;
		}

		tTime = 1.0F - tTime;
		int i = this.ringBufferIndex - tIndex & 63;
		int j = this.ringBufferIndex - tIndex - 1 & 63;
		double[] adouble = new double[3];
		double d0 = this.ringBuffer[i][0];
		double d1 = MathHelper.wrapDegrees(this.ringBuffer[j][0] - d0);
		adouble[0] = d0 + d1 * (double)tTime;
		d0 = this.ringBuffer[i][1];
		d1 = this.ringBuffer[j][1] - d0;
		adouble[1] = d0 + d1 * (double)tTime;
		adouble[2] = this.ringBuffer[i][2] + (this.ringBuffer[j][2] - this.ringBuffer[i][2]) * (double)tTime;
		return adouble;
	}

	private void playSounds() {

		if (!this.worldObj.isRemote)
			return;

		if (!this.isSilent()) {
			float f = MathHelper.cos(this.animTime * ((float)Math.PI * 2F));
			float f1 = MathHelper.cos(this.prevAnimTime * ((float)Math.PI * 2F));

			if (f1 <= -0.3F && f >= -0.3F) {
				this.worldObj.playSound(this.posX, this.posY, this.posZ, SoundEvents.ENTITY_ENDERDRAGON_FLAP, this.getSoundCategory(), 5.0F, 0.8F + this.rand.nextFloat() * 0.3F, false);
			}

			if (!this.phaseManager.getCurrentPhase().getIsStationary() && --this.growlTime < 0) {
				this.worldObj.playSound(this.posX, this.posY, this.posZ, SoundEvents.ENTITY_ENDERDRAGON_GROWL, this.getSoundCategory(), 2.5F, 0.8F + this.rand.nextFloat() * 0.3F, false);
				this.growlTime = 200 + this.rand.nextInt(200);
			}
		}
	}

	private ArrayList<UUID> enemiesList = new ArrayList<UUID>();

	public void addEnemy(EntityPlayer player) {
		this.enemiesList.add(player.getUniqueID());
	}

	private long lastUpdateTicks = 0;
	private int updatePacketInterval = 2;

	private void sendUpdatePacket() {
		if (this.worldObj.isRemote)
			return;

		if (this.lastUpdateTicks + this.updatePacketInterval > this.worldObj.getTotalWorldTime())
			return;

		this.lastUpdateTicks = this.worldObj.getWorldTime();
		((WorldServer)this.worldObj).getEntityTracker().sendToAllTrackingEntity(
			this,
			RezolvePacketHandler.INSTANCE.getPacketFrom(
				new DragonUpdateMessage(this.getEntityId(), this.rotationHeadPitch, this.rotationHeadYaw2)
			)
		);
	}
	/**
	 * Called frequently so the entity can update its state every tick as required. For example, zombies and skeletons
	 * use this to react to sunlight and start to burn.
	 */
	@Override
	public void onLivingUpdate()
	{
		//this.log(" *** Rotation: {}, {}", this.rotationHeadPitch, this.rotationHeadYaw2);

		if (this.worldObj.isRemote) {
			// client

			this.setHealth(this.getHealth());
			this.playSounds();
		} else {
			// server

			this.dragonLookHelper.onUpdateLook();
			this.sendUpdatePacket();
			EntityPlayer entityplayer = this.worldObj.getNearestAttackablePlayer(this.getPosition(), 128.0D, 128.0D);
			if (entityplayer != null) {
				this.dragonLookHelper.setLookPositionWithEntity(entityplayer, 30, 30);
			}
		}

		this.prevAnimTime = this.animTime;
		this.grounded = this.isGrounded();

		if (this.isDying)
			this.deathTicks += 1;

		if (this.getHealth() <= 0.0F)
		{
			float xOffset = (this.rand.nextFloat() - 0.5F) * 8.0F;
			float yOffset = (this.rand.nextFloat() - 0.5F) * 4.0F;
			float zOffset = (this.rand.nextFloat() - 0.5F) * 8.0F;
			this.worldObj.spawnParticle(
				EnumParticleTypes.EXPLOSION_LARGE,
				this.posX + (double)xOffset,
				this.posY + 2.0D + (double)yOffset,
				this.posZ + (double)zOffset,
				0.0D, 0.0D, 0.0D,
				new int[0]
			);
		}
		else
		{
			float motionDistance = 0.2F / (MathHelper.sqrt_double(this.motionX * this.motionX + this.motionZ * this.motionZ) * 10.0F + 1.0F);
			motionDistance = motionDistance * (float)Math.pow(2.0D, this.motionY);

			if (false && this.phaseManager.getCurrentPhase().getIsStationary() && this.grounded) {
				this.animTime = 0.2f;
			} else if (this.phaseManager.getCurrentPhase().getIsDying()) {

				this.animTime = 0.3f;
			} else if (this.phaseManager.getCurrentPhase().getIsStationary()) {
				this.animTime += 0.1F;
			} else if (this.slowed) {
				this.animTime += motionDistance * 0.5F;
			} else {
				this.animTime += motionDistance;
			}

			this.rotationYaw = MathHelper.wrapDegrees(this.rotationYaw);

			if (this.isAIDisabled())
			{
				this.animTime = 0.5F;
			}
			else
			{
				if (this.ringBufferIndex < 0) {
					for (int i = 0; i < this.ringBuffer.length; ++i)
					{
						this.ringBuffer[i][0] = (double)this.rotationYaw;
						this.ringBuffer[i][1] = this.posY;
					}
				}

				if (++this.ringBufferIndex == this.ringBuffer.length) {
					this.ringBufferIndex = 0;
				}

				this.ringBuffer[this.ringBufferIndex][0] = (double)this.rotationYaw;
				this.ringBuffer[this.ringBufferIndex][1] = this.posY;

				if (this.worldObj.isRemote)
				{
					if (this.newPosRotationIncrements > 0)
					{
						double d5 = this.posX + (this.interpTargetX - this.posX) / (double)this.newPosRotationIncrements;
						double d0 = this.posY + (this.interpTargetY - this.posY) / (double)this.newPosRotationIncrements;
						double d1 = this.posZ + (this.interpTargetZ - this.posZ) / (double)this.newPosRotationIncrements;
						double d2 = MathHelper.wrapDegrees(this.interpTargetYaw - (double)this.rotationYaw);
						this.rotationYaw = (float)((double)this.rotationYaw + d2 / (double)this.newPosRotationIncrements);
						this.rotationPitch = (float)((double)this.rotationPitch + (this.interpTargetPitch - (double)this.rotationPitch) / (double)this.newPosRotationIncrements);
						--this.newPosRotationIncrements;
						this.setPosition(d5, d0, d1);
						this.setRotation(this.rotationYaw, this.rotationPitch);
					}

					this.phaseManager.getCurrentPhase().doClientRenderEffects();
				}
				else
				{
					IPhase iphase = this.phaseManager.getCurrentPhase();
					iphase.doLocalUpdate();

					if (this.phaseManager.getCurrentPhase() != iphase)
					{
						iphase = this.phaseManager.getCurrentPhase();
						iphase.doLocalUpdate();
					}

					Vec3d vec3d = iphase.getTargetLocation();

					if (vec3d != null)
					{
						double xDist = vec3d.xCoord - this.posX;
						double yDist = vec3d.yCoord - this.posY;
						double zDist = vec3d.zCoord - this.posZ;
						double sqDist = xDist * xDist + yDist * yDist + zDist * zDist;
						float maxRiseOrFall = iphase.getMaxRiseOrFall();
						yDist = MathHelper.clamp_double(yDist / (double)MathHelper.sqrt_double(xDist * xDist + zDist * zDist), (double)(-maxRiseOrFall), (double)maxRiseOrFall);
						this.motionY += yDist * 0.10000000149011612D;
						this.rotationYaw = MathHelper.wrapDegrees(this.rotationYaw);
						double d4 = MathHelper.clamp_double(MathHelper.wrapDegrees(180.0D - MathHelper.atan2(xDist, zDist) * (180D / Math.PI) - (double)this.rotationYaw), -50.0D, 50.0D);
						Vec3d vec3d1 = (new Vec3d(vec3d.xCoord - this.posX, vec3d.yCoord - this.posY, vec3d.zCoord - this.posZ)).normalize();
						Vec3d vec3d2 = (new Vec3d((double)MathHelper.sin(this.rotationYaw * 0.017453292F), this.motionY, (double)(-MathHelper.cos(this.rotationYaw * 0.017453292F)))).normalize();
						float f8 = Math.max(((float)vec3d2.dotProduct(vec3d1) + 0.5F) / 1.5F, 0.0F);
						this.randomYawVelocity *= 0.8F;
						this.randomYawVelocity = (float)((double)this.randomYawVelocity + d4 * (double)iphase.getYawFactor());
						this.rotationYaw += this.randomYawVelocity * 0.1F;
						float f9 = (float)(2.0D / (sqDist + 1.0D));
						float f10 = 0.06F;
						this.moveRelative(0.0F, -1.0F, 0.06F * (f8 * f9 + (1.0F - f9)));

						if (this.slowed) {
							this.moveEntity(this.motionX * 0.800000011920929D, this.motionY * 0.800000011920929D, this.motionZ * 0.800000011920929D);
						} else {
							this.moveEntity(this.motionX, this.motionY, this.motionZ);
						}

						Vec3d vec3d3 = (new Vec3d(this.motionX, this.motionY, this.motionZ)).normalize();
						float f11 = ((float)vec3d3.dotProduct(vec3d2) + 1.0F) / 2.0F;
						f11 = 0.8F + 0.15F * f11;
						this.motionX *= (double)f11;
						this.motionZ *= (double)f11;
						this.motionY *= 0.9100000262260437D;
					}
				}

				this.renderYawOffset = this.rotationYaw;
				this.dragonPartHead.width = 1.0F;
				this.dragonPartHead.height = 1.0F;
				this.dragonPartNeck.width = 3.0F;
				this.dragonPartNeck.height = 3.0F;
				this.dragonPartTail1.width = 2.0F;
				this.dragonPartTail1.height = 2.0F;
				this.dragonPartTail2.width = 2.0F;
				this.dragonPartTail2.height = 2.0F;
				this.dragonPartTail3.width = 2.0F;
				this.dragonPartTail3.height = 2.0F;
				this.dragonPartBody.height = 3.0F;
				this.dragonPartBody.width = 5.0F;
				this.dragonPartWing1.height = 2.0F;
				this.dragonPartWing1.width = 4.0F;
				this.dragonPartWing2.height = 3.0F;
				this.dragonPartWing2.width = 4.0F;
				float f14 = (float)(this.getMovementOffsets(5, 1.0F)[1] - this.getMovementOffsets(10, 1.0F)[1]) * 10.0F * 0.017453292F;
				float f16 = MathHelper.cos(f14);
				float f18 = MathHelper.sin(f14);
				float f2 = this.rotationYaw * 0.017453292F;
				float f19 = MathHelper.sin(f2);
				float f3 = MathHelper.cos(f2);
				this.dragonPartBody.onUpdate();
				this.dragonPartBody.setLocationAndAngles(this.posX + (double)(f19 * 0.5F), this.posY, this.posZ - (double)(f3 * 0.5F), 0.0F, 0.0F);
				this.dragonPartWing1.onUpdate();
				this.dragonPartWing1.setLocationAndAngles(this.posX + (double)(f3 * 4.5F), this.posY + 2.0D, this.posZ + (double)(f19 * 4.5F), 0.0F, 0.0F);
				this.dragonPartWing2.onUpdate();
				this.dragonPartWing2.setLocationAndAngles(this.posX - (double)(f3 * 4.5F), this.posY + 2.0D, this.posZ - (double)(f19 * 4.5F), 0.0F, 0.0F);

				if (!this.worldObj.isRemote && this.hurtTime == 0) {
					this.collideWithEntities(this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.dragonPartWing1.getEntityBoundingBox().expand(4.0D, 2.0D, 4.0D).offset(0.0D, -2.0D, 0.0D)));
					this.collideWithEntities(this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.dragonPartWing2.getEntityBoundingBox().expand(4.0D, 2.0D, 4.0D).offset(0.0D, -2.0D, 0.0D)));
					this.attackEntitiesInList(this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.dragonPartHead.getEntityBoundingBox().expandXyz(1.0D)));
					this.attackEntitiesInList(this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.dragonPartNeck.getEntityBoundingBox().expandXyz(1.0D)));
				}

				double[] adouble = this.getMovementOffsets(5, 1.0F);
				float f4 = MathHelper.sin(this.rotationYaw * 0.017453292F - this.randomYawVelocity * 0.01F);
				float f20 = MathHelper.cos(this.rotationYaw * 0.017453292F - this.randomYawVelocity * 0.01F);
				this.dragonPartHead.onUpdate();
				this.dragonPartNeck.onUpdate();
				float f5 = this.getHeadYOffset(1.0F);
				this.dragonPartHead.setLocationAndAngles(this.posX + (double)(f4 * 6.5F * f16), this.posY + (double)f5 + (double)(f18 * 6.5F), this.posZ - (double)(f20 * 6.5F * f16), 0.0F, 0.0F);
				this.dragonPartNeck.setLocationAndAngles(this.posX + (double)(f4 * 5.5F * f16), this.posY + (double)f5 + (double)(f18 * 5.5F), this.posZ - (double)(f20 * 5.5F * f16), 0.0F, 0.0F);

				for (int j = 0; j < 3; ++j)
				{
					EntityDragonPart entitydragonpart = null;

					if (j == 0)
					{
						entitydragonpart = this.dragonPartTail1;
					}

					if (j == 1)
					{
						entitydragonpart = this.dragonPartTail2;
					}

					if (j == 2)
					{
						entitydragonpart = this.dragonPartTail3;
					}

					double[] adouble1 = this.getMovementOffsets(12 + j * 2, 1.0F);
					float f21 = this.rotationYaw * 0.017453292F + this.simplifyAngle(adouble1[0] - adouble[0]) * 0.017453292F;
					float f22 = MathHelper.sin(f21);
					float f7 = MathHelper.cos(f21);
					float f23 = 1.5F;
					float f24 = (float)(j + 1) * 2.0F;
					entitydragonpart.onUpdate();
					entitydragonpart.setLocationAndAngles(this.posX - (double)((f19 * 1.5F + f22 * f24) * f16), this.posY + (adouble1[1] - adouble[1]) - (double)((f24 + 1.5F) * f18) + 1.5D, this.posZ + (double)((f3 * 1.5F + f7 * f24) * f16), 0.0F, 0.0F);
				}

				if (!this.worldObj.isRemote)
				{
//					if (this.fightManager != null)
//					{
//						this.fightManager.dragonUpdate(this);
//					}
				}
			}
		}
	}

	private float getHeadYOffset(float p_184662_1_)
	{
		double d0;

		if (this.phaseManager.getCurrentPhase().getIsStationary())
		{
			d0 = -1.0D;
		}
		else
		{
			double[] adouble = this.getMovementOffsets(5, 1.0F);
			double[] adouble1 = this.getMovementOffsets(0, 1.0F);
			d0 = adouble[1] - adouble1[0];
		}

		return (float)d0;
	}

	/**
	 * Pushes all entities inside the list away from the enderdragon.
	 */
	private void collideWithEntities(List<Entity> p_70970_1_)
	{
		double d0 = (this.dragonPartBody.getEntityBoundingBox().minX + this.dragonPartBody.getEntityBoundingBox().maxX) / 2.0D;
		double d1 = (this.dragonPartBody.getEntityBoundingBox().minZ + this.dragonPartBody.getEntityBoundingBox().maxZ) / 2.0D;

		for (Entity entity : p_70970_1_)
		{
			if (entity instanceof EntityLivingBase)
			{
				double d2 = entity.posX - d0;
				double d3 = entity.posZ - d1;
				double d4 = d2 * d2 + d3 * d3;
				entity.addVelocity(d2 / d4 * 4.0D, 0.20000000298023224D, d3 / d4 * 4.0D);

				if (!this.phaseManager.getCurrentPhase().getIsStationary() && ((EntityLivingBase)entity).getRevengeTimer() < entity.ticksExisted - 2)
				{
					entity.attackEntityFrom(DamageSource.causeMobDamage(this), 5.0F);
					this.applyEnchantments(this, entity);
				}
			}
		}
	}

	/**
	 * Simplifies the value of a number by adding/subtracting 180 to the point that the number is between -180 and 180.
	 */
	private float simplifyAngle(double p_70973_1_)
	{
		return (float)MathHelper.wrapDegrees(p_70973_1_);
	}

	/**
	 * Attacks all entities inside this list, dealing 5 hearts of damage.
	 */
	private void attackEntitiesInList(List<Entity> entities)
	{
		for (int i = 0; i < entities.size(); ++i)
		{
			Entity entity = (Entity)entities.get(i);

			if (entity instanceof EntityLivingBase)
			{
				entity.attackEntityFrom(DamageSource.causeMobDamage(this), 10.0F);
				this.applyEnchantments(this, entity);
			}
		}
	}

	boolean isDying = false;

	public boolean attackEntityFromPart(EntityDragonPart dragonPart, DamageSource source, float damage)
	{
		damage = this.phaseManager.getCurrentPhase().getAdjustedDamage(dragonPart, source, damage);

		if (dragonPart != this.dragonPartHead) {
			damage = damage / 4.0F + Math.min(damage, 1.0F);
		}

		if (damage < 0.01F) {
			return false;
		} else {
			this.attackDragonFrom(source, damage);

			float f = this.getHealth();
			this.log(" - Damage applied. Health is: {}", this.getHealth());

			if (this.getHealth() <= 0.001F)
			{
				this.log("Dragon is dying.");
				this.setHealth(1.0F);
				this.isDead = false;
				this.isDying = true;
				this.phaseManager.setPhase(DragonPhaseList.DYING);
			}

			if (this.phaseManager.getCurrentPhase().getIsStationary())
			{
				this.log("Dragon is stationary.");

				this.sittingDamageReceived = (int)((float)this.sittingDamageReceived + (f - this.getHealth()));
				this.log(" - Sitting damage: "+this.sittingDamageReceived);

				if ((float)this.sittingDamageReceived > 0.25F * this.getMaxHealth())
				{
					this.log("Taking the fuck off");
					this.sittingDamageReceived = 0;
					this.phaseManager.setPhase(DragonPhaseList.TAKEOFF);
				}
			}

			return true;
		}
	}

	/**
	 * Called when the entity is attacked.
	 */
	@Override
	public boolean attackEntityFrom(DamageSource source, float amount)
	{
		if (source instanceof EntityDamageSource && ((EntityDamageSource)source).getIsThornsDamage())
		{
			this.attackEntityFromPart(this.dragonPartBody, source, amount);
		}

		return false;
	}

	private boolean isGrounded() {
		return this.worldObj.getBlockState(new BlockPos(this.posX, this.posY, this.posZ).down()).getBlock() != Blocks.AIR;
	}

	/**
	 * Provides a way to cause damage to an ender dragon.
	 */
	protected boolean attackDragonFrom(DamageSource source, float amount)
	{
		System.out.println("Dragon received "+amount+" damage, type: "+source.getDamageType()+", source: "+(source.getSourceOfDamage() != null ? source.getSourceOfDamage().toString() : "unknown"));

		boolean result = super.attackEntityFrom(source, amount);

		System.out.println("Dragon health is: "+this.getHealth());

		return result;
	}

	/**
	 * Called by the /kill command.
	 */
	public void onKillCommand()
	{
		this.setDead();
	}

	public int initPathPoints() {
		if (this.pathPoints[0] == null)
			return this.initPathPoints((int) this.posX, (int)this.posY, (int)this.posZ);
		return this.getNearestPpIdx(this.posX, this.posY, this.posZ);
	}
	/**
	 * Generates values for the fields pathPoints, and neighbors, and then returns the nearest pathPoint to the
	 * specified position.
	 */
	public int initPathPoints(int posX, int posY, int posZ)
	{
		for (int i = 0; i < 24; ++i) {
			int groundOffset = 30;
			int x;
			int z;

			if (i < 12) {
				x = (int)(60.0F * MathHelper.cos(2.0F * (-(float)Math.PI + 0.2617994F * (float)i)));
				z = (int)(60.0F * MathHelper.sin(2.0F * (-(float)Math.PI + 0.2617994F * (float)i)));
			} else if (i < 20) {
				int slice = i - 12;
				x = (int)(40.0F * MathHelper.cos(2.0F * (-(float)Math.PI + 0.3926991F * (float)slice)));
				z = (int)(40.0F * MathHelper.sin(2.0F * (-(float)Math.PI + 0.3926991F * (float)slice)));
				groundOffset += 10;
			} else {
				int slice = i - 20;
				x = (int)(20.0F * MathHelper.cos(2.0F * (-(float)Math.PI + ((float)Math.PI / 4F) * (float)slice)));
				z = (int)(20.0F * MathHelper.sin(2.0F * (-(float)Math.PI + ((float)Math.PI / 4F) * (float)slice)));
			}

			int finalY = Math.max(this.worldObj.getSeaLevel() + 10, this.worldObj.getTopSolidOrLiquidBlock(new BlockPos(posX + x, 0, posZ + z)).getY() + groundOffset);
			this.pathPoints[i] = new PathPoint(posX + x, finalY, posZ + z);
		}

		this.neighbors[0] = 6146;
		this.neighbors[1] = 8197;
		this.neighbors[2] = 8202;
		this.neighbors[3] = 16404;
		this.neighbors[4] = 32808;
		this.neighbors[5] = 32848;
		this.neighbors[6] = 65696;
		this.neighbors[7] = 131392;
		this.neighbors[8] = 131712;
		this.neighbors[9] = 263424;
		this.neighbors[10] = 526848;
		this.neighbors[11] = 525313;
		this.neighbors[12] = 1581057;
		this.neighbors[13] = 3166214;
		this.neighbors[14] = 2138120;
		this.neighbors[15] = 6373424;
		this.neighbors[16] = 4358208;
		this.neighbors[17] = 12910976;
		this.neighbors[18] = 9044480;
		this.neighbors[19] = 9706496;
		this.neighbors[20] = 15216640;
		this.neighbors[21] = 13688832;
		this.neighbors[22] = 11763712;
		this.neighbors[23] = 8257536;

		return this.getNearestPpIdx(this.posX, this.posY, this.posZ);
	}

	/**
	 * Returns the index into pathPoints of the nearest PathPoint.
	 */
	public int getNearestPpIdx(double x, double y, double z)
	{
		float f = 10000.0F;
		int i = 0;
		PathPoint pathpoint = new PathPoint(MathHelper.floor_double(x), MathHelper.floor_double(y), MathHelper.floor_double(z));
		int j = 0;

		if (this.fightManager == null) {
			j = 12;
		}

		for (int k = j; k < 24; ++k) {
			if (this.pathPoints[k] != null) {
				float f1 = this.pathPoints[k].distanceToSquared(pathpoint);

				if (f1 < f) {
					f = f1;
					i = k;
				}
			}
		}

		return i;
	}

	@Override
	public boolean getCanSpawnHere() {

		boolean enoughSpace = this.worldObj.getBlockState(this.getPosition().up()).getBlock() == Blocks.AIR
				&& this.worldObj.getBlockState(this.getPosition().up().up()).getBlock() == Blocks.AIR
				&& this.worldObj.getBlockState(this.getPosition().up().up().up()).getBlock() == Blocks.AIR
				&& this.worldObj.getBlockState(this.getPosition().up().up().up().up()).getBlock() == Blocks.AIR
				&& this.worldObj.getBlockState(this.getPosition().up().up().up().up()).getBlock() == Blocks.AIR;

		if (this.getRNG().nextInt(3) == 0)
			return false;

		return enoughSpace && super.getCanSpawnHere();
	}


	public Path findPath(int startIdx, int finishIdx) {
		return findPath(startIdx, finishIdx, null);
	}

	/**
	 * Find and return a path among the circles described by pathPoints, or null if the shortest path would just be
	 * directly between the start and finish with no intermediate points.
	 *
	 * Starting with pathPoint[startIdx], it searches the neighboring points (and their neighboring points, and so on)
	 * until it reaches pathPoint[finishIdx], at which point it calls makePath to seal the deal.
	 */
	@Nullable
	public Path findPath(int startIdx, int finishIdx, @Nullable PathPoint andThen)
	{
		// Reset the points to unused states

		for (int i = 0; i < 24; ++i) {
			PathPoint pathpoint = this.pathPoints[i];
			pathpoint.visited = false;
			pathpoint.distanceToTarget = 0.0F;
			pathpoint.totalPathDistance = 0.0F;
			pathpoint.distanceToNext = 0.0F;
			pathpoint.previous = null;
			pathpoint.index = -1;
		}

		PathPoint startPoint = this.pathPoints[startIdx];
		PathPoint finishPoint = this.pathPoints[finishIdx];
		startPoint.totalPathDistance = 0.0F;
		startPoint.distanceToNext = startPoint.distanceTo(finishPoint);
		startPoint.distanceToTarget = startPoint.distanceToNext;
		this.pathFindQueue.clearPath();
		this.pathFindQueue.addPoint(startPoint);
		PathPoint pointClosestToFinish = startPoint;
		int j = 0;

		if (this.fightManager == null) {
			j = 12;
		}

		while (!this.pathFindQueue.isPathEmpty()) {
			PathPoint currentPoint = this.pathFindQueue.dequeue();

			// We are now at the destination point. Connect this point to our path,
			// complete the path and return it.

			if (currentPoint.equals(finishPoint)) {
				if (andThen != null) {
					andThen.previous = finishPoint;
					finishPoint = andThen;
				}

				return this.makePath(startPoint, finishPoint);
			}

			// If the current point is closer to the finish than the currently closest point,
			// replace it.

			if (currentPoint.distanceTo(finishPoint) < pointClosestToFinish.distanceTo(finishPoint)) {
				pointClosestToFinish = currentPoint;
			}

			currentPoint.visited = true;
			int currentPointIdx = 0;

			for (int l = 0; l < 24; ++l) {
				if (this.pathPoints[l] == currentPoint) {
					currentPointIdx = l;
					break;
				}
			}

			// Iterate over all points, looking for travelable nodes.

			for (int i = j; i < 24; ++i) {

				// Skip any nodes we can't travel to from the current point.

				boolean travelable = (this.neighbors[currentPointIdx] & 1 << i) > 0;
				if (!travelable)
					continue;

				PathPoint potentialPoint = this.pathPoints[i];

				// Skip any node that has already been visited.

				if (potentialPoint.visited)
					continue;

				float potentialDistance = currentPoint.totalPathDistance + currentPoint.distanceTo(potentialPoint);

				if (!potentialPoint.isAssigned() || potentialDistance < potentialPoint.totalPathDistance) {
					potentialPoint.previous = currentPoint;
					potentialPoint.totalPathDistance = potentialDistance;
					potentialPoint.distanceToNext = potentialPoint.distanceTo(finishPoint);

					if (potentialPoint.isAssigned()) {
						this.pathFindQueue.changeDistance(potentialPoint, potentialPoint.totalPathDistance + potentialPoint.distanceToNext);
					} else {
						potentialPoint.distanceToTarget = potentialPoint.totalPathDistance + potentialPoint.distanceToNext;
						this.pathFindQueue.addPoint(potentialPoint);
					}
				}
			}
		}

		// If the startPoint is already the closest point to the finish, then
		// return no path

		if (pointClosestToFinish == startPoint)
			return null;

		// We ran out of points and did not reach the finish point.

		System.out.println("ERROR: Failed to find path from " + Integer.valueOf(startIdx) + " to " + Integer.valueOf(finishIdx) + ", ended up at " + pointClosestToFinish + " instead");

		if (andThen != null) {
			andThen.previous = pointClosestToFinish;
			pointClosestToFinish = andThen;
		}

		return this.makePath(startPoint, pointClosestToFinish);
	}

	public String getShortId() {
		return getUniqueID().toString().substring(0, 5);
	}

	/**
	 * Create and return a new PathEntity defining a path from the start to the finish, using the connections already
	 * made by the caller, findPath.
	 */
	private Path makePath(PathPoint start, PathPoint finish)
	{
		int i = 1;

		for (PathPoint pathpoint = finish; pathpoint.previous != null; pathpoint = pathpoint.previous) {
			++i;
		}

		PathPoint[] apathpoint = new PathPoint[i];
		PathPoint pathpoint1 = finish;
		--i;

		for (apathpoint[i] = finish; pathpoint1.previous != null; apathpoint[i] = pathpoint1) {
			pathpoint1 = pathpoint1.previous;
			--i;
		}

		return new Path(apathpoint);
	}

	public static void registerFixesDragon(DataFixer fixer)
	{
		EntityLiving.registerFixesMob(fixer, "EnderDragon");
	}

	/**
	 * (abstract) Protected helper method to write subclass entity data to NBT.
	 */
	public void writeEntityToNBT(NBTTagCompound compound)
	{
		super.writeEntityToNBT(compound);
		compound.setInteger("DragonPhase", this.phaseManager.getCurrentPhase().getPhaseList().getId());
	}

	/**
	 * (abstract) Protected helper method to read subclass entity data from NBT.
	 */
	public void readEntityFromNBT(NBTTagCompound compound)
	{
		super.readEntityFromNBT(compound);

		if (compound.hasKey("DragonPhase"))
		{
			this.phaseManager.setPhase(DragonPhaseList.getById(compound.getInteger("DragonPhase")));
		}
	}

	/**
	 * Return the Entity parts making up this Entity (currently only for dragons)
	 */
	public Entity[] getParts()
	{
		return this.dragonPartArray;
	}

	/**
	 * Returns true if other Entities should be prevented from moving through this Entity.
	 */
	public boolean canBeCollidedWith()
	{
		return false;
	}

	public World getWorld()
	{
		return this.worldObj;
	}

	public SoundCategory getSoundCategory()
	{
		return SoundCategory.HOSTILE;
	}

	protected SoundEvent getAmbientSound()
	{
		return SoundEvents.ENTITY_ENDERDRAGON_AMBIENT;
	}

	protected SoundEvent getHurtSound()
	{
		return SoundEvents.ENTITY_ENDERDRAGON_HURT;
	}

	/**
	 * Returns the volume for the sounds this mob makes.
	 */
	protected float getSoundVolume()
	{
		return 5.0F;
	}

	@SideOnly(Side.CLIENT)
	public float getHeadPartYOffset(int p_184667_1_, double[] p_184667_2_, double[] p_184667_3_)
	{
		IPhase iphase = this.phaseManager.getCurrentPhase();
		DragonPhaseList <? extends IPhase > phaselist = iphase.getPhaseList();
		double d0;

		if (phaselist == DragonPhaseList.LANDING || phaselist == DragonPhaseList.TAKEOFF) {
			BlockPos blockpos = this.worldObj.getTopSolidOrLiquidBlock(WorldGenEndPodium.END_PODIUM_LOCATION);
			float f = Math.max(MathHelper.sqrt_double(this.getDistanceSqToCenter(blockpos)) / 4.0F, 1.0F);
			d0 = (double)((float)p_184667_1_ / f);
			return (float)d0;
		}

		if (iphase.getIsStationary()) {
			d0 = (double)p_184667_1_;
		} else if (p_184667_1_ == 6) {
			d0 = 0.0D;
		} else {
			d0 = p_184667_3_[1] - p_184667_2_[1];
		}

		return (float)d0;
	}

	public float rotationHeadPitch;
	public float rotationHeadYaw2;

	public Vec3d getHeadLookVec(float p_184665_1_)
	{
		IPhase iphase = this.phaseManager.getCurrentPhase();
		DragonPhaseList <? extends IPhase > phaselist = iphase.getPhaseList();
		Vec3d vec3d;

		if (phaselist == DragonPhaseList.LANDING || phaselist == DragonPhaseList.TAKEOFF)
		{
			BlockPos blockpos = this.worldObj.getTopSolidOrLiquidBlock(WorldGenEndPodium.END_PODIUM_LOCATION);
			float f = Math.max(MathHelper.sqrt_double(this.getDistanceSqToCenter(blockpos)) / 4.0F, 1.0F);
			float f1 = 6.0F / f;
			float f2 = this.rotationPitch;
			float f3 = 1.5F;
			this.rotationPitch = -f1 * 1.5F * 5.0F;
			vec3d = this.getLook(p_184665_1_);
			this.rotationPitch = f2;
			return vec3d;
		}

		if (iphase.getIsStationary()) {
			float f4 = this.rotationPitch;
			float f5 = 1.5F;
			this.rotationPitch = -45.0F;
			vec3d = this.getLook(p_184665_1_);
			this.rotationPitch = f4;
		} else {
			vec3d = this.getLook(p_184665_1_);
		}

		return vec3d;
	}

	public void notifyDataManagerChange(DataParameter<?> key)
	{
		if (PHASE.equals(key) && this.worldObj.isRemote)
		{
			this.phaseManager.setPhase(DragonPhaseList.getById(((Integer)this.getDataManager().get(PHASE)).intValue()));
		}

		super.notifyDataManagerChange(key);
	}

	public DragonPhaseManager getPhaseManager()
	{
		return this.phaseManager;
	}

	@Nullable
	public DragonFightManager getFightManager()
	{
		return this.fightManager;
	}

	@Override
	protected boolean canBeRidden(Entity entityIn)
	{
		return true;
	}

	public Vec3d getHeadPos() {
		// head pos: 0, 36.63538, -58.75632
		return this.getPositionVector().add(new Vec3d(0, 36.63538, -58.75632));
	}
}
